name: cache-qt5-vtk

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

env:
  AQT_TARGET: desktop
  AQT_VER: 5.15.2
  VTK_VER: 9.1.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "install-qt-macos-11",
            os: macos-11,
            aqt_host: mac,
            aqt_arch: clang_64
          }
        - {
            name: "install-qt-ubuntu-20.04",
            os: ubuntu-20.04,
            aqt_host: linux,
            aqt_arch: gcc_64
          }
        - {
            name: "install-qt-windows-2019",
            os: windows-2019,
            aqt_host: windows,
            aqt_arch: win64_msvc2019_64
          }

    steps:
      - uses: actions/checkout@v3

      - name: Install Qt
        uses: jurplel/install-qt-action@v3 
        with:
          version: ${{ env.AQT_VER }}
          host: ${{ matrix.config.aqt_host }}
          target: ${{ env.AQT_TARGET }}
          arch: ${{ matrix.config.aqt_arch }}
          dir: ${{ env.RUNNER_WORKSPACE }}
          cache: true
          cache-key-prefix: install-qt-action
          tools: tools_ninja

      - name: Add ninja path
        shell: bash
        run: |
          echo "${IQTA_TOOLS}/Ninja" >> $GITHUB_PATH

      - name: Set up Visual Studio shell
        if: runner.os == 'Windows'
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build test2 with cmake
        run: |
          cd test2
          mkdir _ninja
          cd _ninja
          cmake -G "Ninja Multi-Config" ..
          cmake --build . --config Debug
          cmake --build . --config Release

      - name: Check dependencies
        shell: cmake -P {0}
        run: |
          if ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
            execute_process(
              COMMAND         ldd ./test2/_ninja/Release/mainwindow
              RESULT_VARIABLE result
            )
            if (NOT result EQUAL 0)
              message(FATAL_ERROR "ldd failed")
            endif()
          endif()
          if ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
            execute_process(
              COMMAND         otool -L ./test2/_ninja/Release/mainwindow
              RESULT_VARIABLE result
            )
            if (NOT result EQUAL 0)
              message(FATAL_ERROR "otool failed")
            endif()
          endif()
          if ("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
            execute_process(
              COMMAND         dumpbin /imports ./test2/_ninja/Release/mainwindow.exe
              RESULT_VARIABLE result
            )
            if (NOT result EQUAL 0)
              message(FATAL_ERROR "dumpbin failed")
            endif()
          endif()

      - name: Print env
        if: runner.os == 'Windows'
        run: |
          dir env:
          echo ################################
          echo $env:RUNNER_WORKSPACE
          echo ${{ env.RUNNER_WORKSPACE }}
          echo ${env:RUNNER_WORKSPACE}
          echo ################################
          echo $env:VTK_VER
          echo ${{ env.VTK_VER }}
          echo ${env:VTK_VER}
          echo ################################
          echo ${{ runner.workspace }}

      - name: Print env
        if: runner.os != 'Windows'
        run: |
          printenv
          echo ################################
          echo $RUNNER_WORKSPACE
          echo ${{ env.RUNNER_WORKSPACE }}
          echo ${RUNNER_WORKSPACE}
          echo ################################
          echo $VTK_VER
          echo ${{ env.VTK_VER }}
          echo ${VTK_VER}
          echo ################################
          echo ${{ runner.workspace }}

      # - name: Cache qt5-vtk
      #   id: cache-qt5-vtk
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.RUNNER_WORKSPACE }}/qt5-vtk-${{ env.VTK_VER }}
      #     key: ${{ matrix.config.os }}-qt5-vtk-${{ hashFiles('misc/CMakePresets.json') }}

      # - name: Download and build VTK
      #   if: steps.cache-qt5-vtk.outputs.cache-hit != 'true'
      #   run: |
      #     cd ${{ env.RUNNER_WORKSPACE }}
      #     curl -L -O https://github.com/Kitware/VTK/archive/refs/tags/v${{ env.VTK_VER }}.tar.gz
      #     tar xzf ./v${{ env.VTK_VER }}.tar.gz
      #     cp ./qt-install/misc/CMakePresets.json ./VTK-${{ env.VTK_VER }}/.
      #     cd ./VTK-${{ env.VTK_VER }}/.
      #     cmake --preset ${{ matrix.config.aqt_arch }}
      #     cmake --build --preset ${{ matrix.config.aqt_arch }} --config Debug
      #     cmake --build --preset ${{ matrix.config.aqt_arch }} --config Release
      #     cmake --install ${{ env.RUNNER_WORKSPACE }}/qt5-vtk-${{ env.VTK_VER }}-build --config Debug
      #     cmake --install ${{ env.RUNNER_WORKSPACE }}/qt5-vtk-${{ env.VTK_VER }}-build --config Release
